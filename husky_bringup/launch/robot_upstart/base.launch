<?xml version="1.0"?>
<!--
Copyright (c) 2014, Clearpath Robotics
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Clearpath Robotics nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<launch>
    <arg name="port" default="$(optenv HUSKY_PORT /dev/prolific)" />

    <arg name="no_static_map" default="true"/>
    <arg name="base_global_planner" default="navfn/NavfnROS"/>
    <arg name="base_local_planner" default="dwa_local_planner/DWAPlannerROS"/>

    <!-- Husky harware driver -->
    <node pkg="husky_base" type="husky_node" name="husky_node">
        <rosparam subst_value="true">
            port: $(arg port)

            control_frequency: 10.0
            diagnostic_frequency: 1.0

            max_acceleration: 1.0
            max_speed: 1.0
            wheel_diameter: 0.3302
            polling_timeout: 10.0
        </rosparam>
    </node>

    <!-- Differential controller parameters and basic localization -->
    <include file="$(find husky_control)/launch/control.launch" />

    <!--Teleop -->
    <include file="$(find husky_control)/launch/teleop.launch" />

    <!--Camera 3D ZED-->
    <node name="zed_node" pkg="zed_wrapper" type="zed_wrapper_node">
        <rosparam command="load" file="$(find husky_bringup)/config/zed2_camera_config.yaml" />
    </node>

    <!--IMU SBG-->
    <node name="sbg_device" pkg="sbg_driver" type="sbg_device" >
        <rosparam command="load" file="$(find husky_bringup)/config/sbg_ellipse_D.yaml" />
    </node>
    
    <!--GPS Receiver-->
    <!--<node pkg="nmea_navsat_driver" type="nmea_serial_driver" name="nmea_serial_driver" respawn="true" respawn_delay="5">
        <rosparam command="load" file="$(find husky_bringup)/config/gps_config.yaml" />
        <remap from="/fix" to="/navsat/fix" />
        <remap from="/vel" to="/navsat/vel" />
    </node>-->
    
    <!--Lidar 3D Robosense-->
    <node name="rslidar_sdk_node" pkg="rslidar_sdk" type="rslidar_sdk_node">
        <rosparam command="load" file="$(find husky_bringup)/config/rslidar_16_config.yaml" />
    </node>

    <!--<node pkg="nodelet" type="nodelet" name="point_cloud_intensity_filter" args="standalone cob_3d_mapping_filters/IntensityFilter" respawn="true" >
        <remap from="~point_cloud_in" to="/rslidar_points" />
        <remap from="~point_cloud_out" to="/rslidar_points_filtered" />
        <rosparam command="load" file="$(find husky_bringup)/config/point_cloud_intensity_filter.yaml" />
    </node>-->

    <!--Move base-->
    <node pkg="move_base" type="move_base" name="move_base" respawn="false" >
      <param name="base_global_planner" value="$(arg base_global_planner)"/>
      <param name="base_local_planner" value="$(arg base_local_planner)"/>  
      <rosparam file="$(find husky_navigation)/config/planner.yaml" command="load"/>

      <!-- observation sources located in costmap_common.yaml -->
      <rosparam file="$(find husky_navigation)/config/costmap_common.yaml" command="load" ns="global_costmap" />
      <rosparam file="$(find husky_navigation)/config/costmap_common.yaml" command="load" ns="local_costmap" />

      <!-- local costmap, needs size -->
      <rosparam file="$(find husky_navigation)/config/costmap_local.yaml" command="load" ns="local_costmap" />
      <param name="local_costmap/width" value="10.0"/>
      <param name="local_costmap/height" value="10.0"/>

      <!-- static global costmap, static map provides size -->
      <rosparam file="$(find husky_navigation)/config/costmap_global_static.yaml" command="load" ns="global_costmap" unless="$(arg no_static_map)"/>
    
      <!-- global costmap with laser, for odom_navigation_demo -->
      <rosparam file="$(find husky_navigation)/config/costmap_global_laser.yaml" command="load" ns="global_costmap" if="$(arg no_static_map)"/>
      <param name="global_costmap/width" value="100.0" if="$(arg no_static_map)"/>
      <param name="global_costmap/height" value="100.0" if="$(arg no_static_map)"/>
    </node>

    <!--Mission Manager-->
    <node pkg="mission_manager" type="mission_manager_node" name="mission_manager_node">
        <rosparam command="load" file="$(find husky_bringup)/config/mission_manager.yaml" />
    </node>

    <!--CoHoMa Detection-->
    <include file="$(find cohoma_detection)/launch/detect.launch" />

    <!--ROS Bridge Server-->
    <node pkg="rosbridge_server" type="rosbridge_websocket" name="rosbridge_websocket">
        <rosparam command="load" file="$(find husky_bringup)/config/sbg_ellipse_D.yaml" />
    </node>

    <!-- Diagnostic Aggregator -->
    <node pkg="diagnostic_aggregator" type="aggregator_node" name="diagnostic_aggregator">
        <rosparam command="load" file="$(find husky_base)/config/diagnostics.yaml"/>
    </node>

    <!-- rosbag recorder (comment to save storage). Is called through a bash script to make it flexible -->
    <node pkg="rosbag_recorder" type="rosbag_rania.sh" name="rosbag_rania" output="screen"/>


</launch>
